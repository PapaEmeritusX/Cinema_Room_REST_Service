type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("row", 1)
                        .value("column", 1)
                        .value("price", 10)
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                );


            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds
        };
    }
  learner_created: false
- name: src/cinema/Seat.java
  visible: true
  text: |
    package cinema;

    public class Seat {
        private int row;
        private int column;

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }
    }
  learner_created: true
- name: src/cinema/Cinema.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonProperty;

    import java.util.ArrayList;
    import java.util.List;

    public class Cinema {
        @JsonProperty("total_rows")
        private final int totalRows;
        @JsonProperty("total_columns")
        private final int totalColumns;
        @JsonProperty("available_seats")
        private List<Seat> availableSeats;

        public Cinema() {
            this.totalRows = 9;
            this.totalColumns = 9;
            this.availableSeats = new ArrayList<>();
            initAvailableSeats();

        }
        public void setAvailableSeats() {

        }
        public void initAvailableSeats() {

            for (int i = 1; i <= totalRows; i++) {
                for (int j = 1; j <= totalColumns; j++) {
                    availableSeats.add(new Seat(i,j));
                }
            }
        }
        public int getTotalRows() {
            return totalRows;
        }

        public int getTotalColumns() {
            return totalColumns;
        }

        public List<Seat> getAvailableSeats() {
            return availableSeats;
        }

        public String toString() {
            return this.totalRows + "\n" + this.totalColumns + " " + this.availableSeats;
        }
    }
  learner_created: true
- name: src/cinema/CinemaController.java
  visible: true
  text: |
    package cinema;

    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    public class CinemaController {
        Cinema cinemaRoom = new Cinema();

        @GetMapping("/seats")
        public Cinema getCinema() {
            return new Cinema();
        }
    }
  learner_created: true
- name: src/cinema/Error.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/946/implement#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #2

    The JSON element at path &quot;/available_seats/0/price&quot; is incorrect, found 0

    Full JSON:
    {
      &quot;total_rows&quot;: 9,
      &quot;total_columns&quot;: 9,
      &quot;available_seats&quot;: [
        {
          &quot;row&quot;: 1,
          &quot;column&quot;: 1,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 1,
          &quot;column&quot;: 2,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 1,
          &quot;column&quot;: 3,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 1,
          &quot;column&quot;: 4,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 1,
          &quot;column&quot;: 5,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 1,
          &quot;column&quot;: 6,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 1,
          &quot;column&quot;: 7,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 1,
          &quot;column&quot;: 8,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 1,
          &quot;column&quot;: 9,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 2,
          &quot;column&quot;: 1,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 2,
          &quot;column&quot;: 2,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 2,
          &quot;column&quot;: 3,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 2,
          &quot;column&quot;: 4,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 2,
          &quot;column&quot;: 5,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 2,
          &quot;column&quot;: 6,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 2,
          &quot;column&quot;: 7,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 2,
          &quot;column&quot;: 8,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 2,
          &quot;column&quot;: 9,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 3,
          &quot;column&quot;: 1,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 3,
          &quot;column&quot;: 2,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 3,
          &quot;column&quot;: 3,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 3,
          &quot;column&quot;: 4,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 3,
          &quot;column&quot;: 5,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 3,
          &quot;column&quot;: 6,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 3,
          &quot;column&quot;: 7,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 3,
          &quot;column&quot;: 8,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 3,
          &quot;column&quot;: 9,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 4,
          &quot;column&quot;: 1,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 4,
          &quot;column&quot;: 2,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 4,
          &quot;column&quot;: 3,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 4,
          &quot;column&quot;: 4,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 4,
          &quot;column&quot;: 5,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 4,
          &quot;column&quot;: 6,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 4,
          &quot;column&quot;: 7,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 4,
          &quot;column&quot;: 8,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 4,
          &quot;column&quot;: 9,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 5,
          &quot;column&quot;: 1,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 5,
          &quot;column&quot;: 2,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 5,
          &quot;column&quot;: 3,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 5,
          &quot;column&quot;: 4,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 5,
          &quot;column&quot;: 5,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 5,
          &quot;column&quot;: 6,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 5,
          &quot;column&quot;: 7,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 5,
          &quot;column&quot;: 8,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 5,
          &quot;column&quot;: 9,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 6,
          &quot;column&quot;: 1,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 6,
          &quot;column&quot;: 2,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 6,
          &quot;column&quot;: 3,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 6,
          &quot;column&quot;: 4,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 6,
          &quot;column&quot;: 5,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 6,
          &quot;column&quot;: 6,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 6,
          &quot;column&quot;: 7,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 6,
          &quot;column&quot;: 8,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 6,
          &quot;column&quot;: 9,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 7,
          &quot;column&quot;: 1,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 7,
          &quot;column&quot;: 2,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 7,
          &quot;column&quot;: 3,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 7,
          &quot;column&quot;: 4,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 7,
          &quot;column&quot;: 5,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 7,
          &quot;column&quot;: 6,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 7,
          &quot;column&quot;: 7,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 7,
          &quot;column&quot;: 8,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 7,
          &quot;column&quot;: 9,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 8,
          &quot;column&quot;: 1,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 8,
          &quot;column&quot;: 2,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 8,
          &quot;column&quot;: 3,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 8,
          &quot;column&quot;: 4,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 8,
          &quot;column&quot;: 5,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 8,
          &quot;column&quot;: 6,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 8,
          &quot;column&quot;: 7,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 8,
          &quot;column&quot;: 8,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 8,
          &quot;column&quot;: 9,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 9,
          &quot;column&quot;: 1,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 9,
          &quot;column&quot;: 2,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 9,
          &quot;column&quot;: 3,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 9,
          &quot;column&quot;: 4,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 9,
          &quot;column&quot;: 5,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 9,
          &quot;column&quot;: 6,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 9,
          &quot;column&quot;: 7,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 9,
          &quot;column&quot;: 8,
          &quot;price&quot;: 0
        },
        {
          &quot;row&quot;: 9,
          &quot;column&quot;: 9,
          &quot;price&quot;: 0
        }
      ]
    }

    Please find below the output of your program during this failed test.

    ---


      .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::        (v2.3.1.RELEASE)

    2021-07-15 19:50:05.835  INFO 26240 --- [    Test worker] cinema.Main                              : Starting Main on DESKTOP-RT04MDB with PID 26240 (started by karim in C:\Users\karim\IdeaProjects\Cinema Room REST Service\Cinema Room REST Service\task)
    2021-07-15 19:50:05.839  INFO 26240 --- [    Test worker] cinema.Main                              : No active profile set, falling back to default profiles: default
    2021-07-15 19:50:07.206  INFO 26240 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 28852 (http)
    2021-07-15 19:50:07.217  INFO 26240 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2021-07-15 19:50:07.218  INFO 26240 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
    2021-07-15 19:50:07.334  INFO 26240 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2021-07-15 19:50:07.334  INFO 26240 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1442 ms
    2021-07-15 19:50:07.611  INFO 26240 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;
    2021-07-15 19:50:07.888  INFO 26240 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;
    2021-07-15 19:50:07.950  INFO 26240 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 28852 (http) with context path &#39;&#39;
    2021-07-15 19:50:07.971  INFO 26240 --- [    Test worker] cinema.Main                              : Started Main in 2.561 seconds (JVM running for 3.523)
    2021-07-15 19:50:08.449  INFO 26240 --- [io-28852-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2021-07-15 19:50:08.450  INFO 26240 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2021-07-15 19:50:08.460  INFO 26240 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
  time: Thu, 15 Jul 2021 14:50:08 UTC
record: -1
